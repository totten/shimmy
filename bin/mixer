#!/usr/bin/env php
<?php

function task_create(array $options, string $targetDir, ...$mixinNames) {
  if (file_exists($targetDir)) {
    if (!empty($options['force'])) {
      fprintf(STDOUT, "Remove %s\n", $targetDir);
      remove_dir($targetDir);
    }
    else {
      throw new \RuntimeException("Cannot overwrite $targetDir");
    }
  }

  $mixinNames = resolve_mixin_names($mixinNames);
  fprintf(STDOUT, "Create %s for %s\n", $targetDir, implode(',', $mixinNames));

  $srcDirs = [];
  $srcDirs[] = mixin_dir() . "/COMMON/example";
  foreach ($mixinNames as $mixinName) {
    $srcDirs[] = mixin_dir() . "/$mixinName/example";
  }
  deep_copy($srcDirs, $targetDir);

  mkdir("$targetDir/mixin");
  foreach ($mixinNames as $mixinName) {
    copy(assert_file(mixin_dir() . "/$mixinName/mixin.php"), "$targetDir/mixin/$mixinName.mixin.php");
  }

  rename(assert_file("$targetDir/info.xml.template"), "$targetDir/info.xml");
  update_xml("$targetDir/info.xml", function (SimpleXMLElement $info) use ($mixinNames) {
    $mixins = $info->addChild('mixins');
    foreach ($mixinNames as $mixinName) {
      $mixins->addChild('mixin', $mixinName);
    }
  });

  return $targetDir;
}

function task_test(array $options, string $targetDir, ...$mixinNames) {
  $mixinNames = resolve_mixin_names($mixinNames);
  if (!empty($options['isolate']) && count($mixinNames) > 1) {
    foreach ($mixinNames as $mixinName) {
      task_test($options + ['force' => TRUE], $targetDir, $mixinName);
    }
    return;
  }

  if (is_dir($targetDir) || !empty($options['force'])) {
    $targetDir = task_create($options, $targetDir, ...$mixinNames);
  }
  if (empty(glob("$targetDir/tests/mixin/*.php"))) {
    fprintf(STDERR, "Skip. No tests found for %s\n", implode(',', $mixinNames));
    return;
  }
  fprintf(STDOUT, "Test %s\n", implode(',', $mixinNames));
  with_dir($targetDir, function () {
    phpunit('--group e2e --debug --stop-on-failure');
  });
}

function task_help(array $options) {
  $cmd = basename($GLOBALS['argv'][0]);
  fprintf(STDERR, "%s - Test utility for extension mixins\n", $cmd);
  fprintf(STDERR, "\n");
  fprintf(STDERR, "Usage:\n");
  fprintf(STDERR, "  %s create [-f] <new-ext-path> [<mixin-name>...]\n", $cmd);
  fprintf(STDERR, "  %s test [-f] [--isolate] <new-ext-path> [<mixin-name>...]\n", $cmd);
}

function mixin_dir(): string {
  return dirname(__DIR__);
}

function assert_dir(string $dir): string {
  if (!file_exists($dir) || !is_dir($dir)) {
    throw new \RuntimeException("Directory does not exist ($dir)");
  }
  return $dir;
}

function assert_file(string $file): string {
  if (!file_exists($file)) {
    throw new \RuntimeException("File does not exist ($file)");
  }
  return $file;
}

function remove_dir(string $dir): void {
  if (file_exists($dir)) {
    passthru_ok("rm -rf " . escapeshellarg($dir));
  }
}

function deep_copy(array $srcDirs, string $targetDir): void {
  $srcDirs = (array) $srcDirs;
  foreach ($srcDirs as $srcDir) {
    assert_dir($srcDir);
  }

  if (!file_exists($targetDir)) {
    mkdir($targetDir);
  }

  foreach ($srcDirs as $srcDir) {
    passthru_ok(sprintf('rsync -a %s/./ %s/./', escapeshellarg($srcDir), escapeshellarg($targetDir)));
  }
}

function phpunit(string $args = '') {
  passthru_ok('phpunit8 ' . $args);
}

function passthru_ok($cmd) {
  passthru($cmd, $return);
  if ($return !== 0) {
    throw new \RuntimeException("Command failed ($cmd)");
  }
}

function resolve_mixin_names(array $mixinNames): array {
  if (empty($mixinNames)) {
    $dirs = (array) glob(mixin_dir() . '/*@*');
    foreach ($dirs as $dir) {
      if (is_dir($dir)) {
        $mixinNames[] = basename($dir);
      }
    }
    sort($mixinNames);
    return $mixinNames;
  }
  else {
    return array_map(
      function (string $mixinName) {
        return trim($mixinName, '/' . DIRECTORY_SEPARATOR);
      }, $mixinNames);
  }
}

function with_dir(string $dir, callable $callback) {
  assert_dir($dir);
  $orig = getcwd();
  try {
    chdir($dir);
    $callback();
  } finally {
    chdir($orig);
  }
}

function update_xml(string $file, callable $filter): void {
  $dom = new DomDocument();
  $dom->load($file);
  $dom->xinclude();
  $simpleXml = simplexml_import_dom($dom);
  $filter($simpleXml);
  // force pretty printing with encode/decode cycle
  $outXML = $simpleXml->saveXML();
  $xml = new DOMDocument();
  $xml->encoding = 'iso-8859-1';
  $xml->preserveWhiteSpace = FALSE;
  $xml->formatOutput = TRUE;
  $xml->loadXML($outXML);
  file_put_contents($file, $xml->saveXML());
}

function main($args) {
  $cmd = array_shift($args);
  $taskName = array_shift($args);
  $task = 'task_' . preg_replace(';[^\w];', '_', $taskName);

  $newOptions = $newArgs = [];
  foreach ($args as $arg) {
    if ($arg === '-f') {
      $newOptions['force'] = TRUE;
    }
    elseif (preg_match(';^--(isolate|force)$;', $arg, $m)) {
      $newOptions[$m[1]] = TRUE;
    }
    else {
      $newArgs[] = $arg;
    }
  }

  if (function_exists($task)) {
    call_user_func($task, $newOptions, ...$newArgs);
  }
  else {
    task_help([]);
    exit(1);
  }
}

main($argv);
